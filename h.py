# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10Ij-LO0M3awaFdI7H2q641mTZWik7lsW
"""

# 安装所需的库
!pip install yfinance matplotlib

import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime, timedelta

# 定义函数以获取单个股票的历史数据
def fetch_stock_data(symbol, start_date, end_date):
    try:
        stock = yf.download(symbol, start=start_date, end=end_date)
        if stock.empty:
            print(f"警告：未能获取到 {symbol} 的数据。请检查股票代号是否正确或该股票是否已退市。")
            return None
        stock['Symbol'] = symbol
        return stock
    except Exception as e:
        print(f"错误：获取 {symbol} 数据时出错。错误信息：{e}")
        return None

# 输入多支股票代号，用逗号分隔
symbols_input = input("請輸入多支台灣股市代號（用逗號分隔）: ")
# 替换全角逗号为半角逗号，并分割
symbols_list = [symbol.strip() + ".TW" for symbol in symbols_input.replace('，', ',').split(",")]

# 输入对比的股票代号
benchmark_input = input("請輸入用於對比的台灣股市代號: ")
benchmark_symbol = benchmark_input.strip() + ".TW"

# 定义日期范围（过去两年）
end_date = datetime.today()
start_date = end_date - timedelta(days=730)

# 获取多支股票的历史数据
portfolio_data_list = []

for symbol in symbols_list:
    data = fetch_stock_data(symbol, start_date.strftime('%Y-%m-%d'), end_date.strftime('%Y-%m-%d'))
    if data is not None:
        portfolio_data_list.append(data)

# 检查是否有有效的数据
if not portfolio_data_list:
    print("未能获取到任何有效的投资组合股票数据。请检查股票代号并重试。")
else:
    # 使用 pd.concat 合并所有股票的数据
    portfolio_data = pd.concat(portfolio_data_list)

    # 重置索引
    portfolio_data.reset_index(inplace=True)

    # 通过 Pivot 表将数据整理为以日期为索引，股票代号为列的收盘价
    pivot_close = portfolio_data.pivot(index='Date', columns='Symbol', values='Close')

    # 处理缺失值（如有）
    pivot_close.fillna(method='ffill', inplace=True)
    pivot_close.dropna(inplace=True)

    # 计算每日收益率
    returns = pivot_close.pct_change()

    # 计算组合的平均每日收益率（等权重）
    portfolio_returns = returns.mean(axis=1)

    # 获取基准股票的历史数据
    benchmark_data = fetch_stock_data(benchmark_symbol, start_date.strftime('%Y-%m-%d'), end_date.strftime('%Y-%m-%d'))

    if benchmark_data is not None and not benchmark_data.empty:
        # 计算基准股票的每日收益率
        benchmark_returns = benchmark_data['Close'].pct_change()

        # 对齐日期索引
        portfolio_returns = portfolio_returns.loc[benchmark_returns.index]
        benchmark_returns = benchmark_returns.loc[portfolio_returns.index]

        # 计算累积收益
        portfolio_cumulative_returns = (1 + portfolio_returns).cumprod()
        benchmark_cumulative_returns = (1 + benchmark_returns).cumprod()

        # 绘制累积收益曲线
        plt.figure(figsize=(14,7))
        plt.plot(portfolio_cumulative_returns, label='投資組合累積收益')
        plt.plot(benchmark_cumulative_returns, label=f'{benchmark_input} 累積收益')
        plt.title('投資組合與基準股票累積收益對比')
        plt.xlabel('日期')
        plt.ylabel('累積收益')
        plt.legend()
        plt.grid()
        plt.show()

        # 计算总收益
        total_portfolio_return = portfolio_cumulative_returns[-1] - 1
        total_benchmark_return = benchmark_cumulative_returns[-1] - 1

        print(f"投資組合總收益: {total_portfolio_return * 100:.2f}%")
        print(f"{benchmark_input} 總收益: {total_benchmark_return * 100:.2f}%")
    else:
        print(f"無法取得基準股票 {benchmark_input} 的資料。請檢查股票代號是否正確或該股票是否已退市。")